ðŸ§© First and Last Position of Element in Sorted Array â€“ Notes

Problem:
Given a sorted array and a target value, find the first and last positions of the target.
If the target is not found, return [-1, -1].

Key Points:

Works on sorted arrays using binary search.

Find first occurrence â†’ move left (high = mid - 1) when target is found.

Find last occurrence â†’ move right (low = mid + 1) when target is found.

If target not found, both will remain -1.

Avoids linear scan â†’ efficient O(log n) runtime.

Time Complexity: O(log n)
Space Complexity: O(1)

class Solution {
public:

    int findFirst(const vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1, first = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                first = mid;
                high = mid - 1; // move left for earlier occurrence
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return first;
    }

    int findLast(const vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1, last = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                last = mid;
                low = mid + 1; // move right for later occurrence
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return last;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int first = findFirst(nums, target);
        int last = findLast(nums, target);
        return {first, last};
    }
};
