ðŸ§© Upper Bound â€“ Notes

Problem:
Find the first index in a sorted array where arr[ind] > target.
If no such index exists, return n (array size).

Key Points:

Works only on sorted arrays.

Similar to lower bound, but condition changes to arr[mid] > target.

If arr[mid] > target, store mid as potential answer and move left (high = mid - 1).

Else, move right (low = mid + 1).

Final answer gives the smallest index with value greater than target.

Time Complexity: O(log n)
Space Complexity: O(1)

int upperBound(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1, ans = nums.size();
    while (low <= high) {
        int mid = (low + high) / 2;
        if (nums[mid] > x) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return ans;
}
