ðŸ§© Search Insert Position (as Lower Bound) â€“ Notes

Problem:
Given a sorted array and a target, find the index if the target exists.
If not, return the index where it should be inserted to keep the array sorted.

Key Points:

This is essentially the lower bound problem â€” find the first index i where arr[i] >= target.

If the target exists â†’ that index is its position.

If it doesnâ€™t exist â†’ that index is where it should be inserted.

If all elements are smaller â†’ return n (end position).

Works in O(log n) using binary search.

Time Complexity: O(log n)
Space Complexity: O(1)

int searchInsert(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;
    int ans = nums.size();

    while (low <= high) {
        int mid = (low + high) / 2;

        // same as lower bound condition
        if (nums[mid] >= target) {
            ans = mid;
            high = mid - 1;  // look for smaller index
        } else {
            low = mid + 1;   // look on the right
        }
    }
    return ans;
}

